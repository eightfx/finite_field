* finite fields
A Rust library for operations on finite field, featuring:
- Sum, difference, product, and quotient of elements F_p
- Sum, difference, product, and quotient of elements GF(p^n)
- Obtaining the primitive polynomial
- Sum, difference, product, quotient, and remainder of polynomial over F_p
- Sum, difference, product, quotient, and remainder of polynomial over GF(p^n)
- Sum, product of Matrix F_p
- Sum, product of Matrix GF(p^n)
- The sweep method (or Gaussian elimination) of matrices on finite bodies (F_p, GF(p^n)) is also available. 

  
* What makes it different from other libraries?

** Pros:
- Can be calculated with F_p, GF(p^n) for any prime and any multiplier, not limited to a char 2.
- Can freely compute four types of element: prime, Galois, polynomial of prime, and polynomial of Galois.
- Each can be calculated with +-*/, so you can write natural code.
- Matrix operations on finite bodies (F_p, GF(p^n)) can also be performed.
- The sweep method can be available.
  
** Cons:
- It takes longer than other libraries because it is not optimized for each character.

* Usage
Add this to your Cargo.toml:
#+begin_src
[dependencies]
galois_field = "0.1.5"
#+end_src

* Examples
** Prime Field
#+begin_src rust
use galois_field::*;

fn main() {
	let char: u32 = 2;
	let n = 4;
	
	let primitive_polynomial = Polynomial::get_primitive_polynomial(char, n);
	let x:FiniteField = FiniteField{
		char: char,
		element:Element::GaloisField{element:vec![0,1],primitive_polynomial:primitive_polynomial.clone()} // i.e. [0,1] = x -> 2 over GF(2^4)
	};
	let y:FiniteField = FiniteField{
		char: char,
		element:Element::GaloisField{element:vec![0,0,1,1],primitive_polynomial:primitive_polynomial.clone()} // i.e. [0,0,1,1] = x^3 + x^2 -> 12 over GF(2^4)
	};
	
	println!("x + y = {:?}", (x.clone() + y.clone()).element);
	println!("x - y = {:?}", (x.clone() - y.clone()).element);
	println!("x * y = {:?}", (x.clone() * y.clone()).element);
	println!("x / y = {:?}", (x.clone() / y.clone()).element);
}
#+end_src
** Galois Field
#+begin_src rust
use galois_field::*;

fn main(){
	// consider GF(2^4)
	let char: u32 = 2;
	let n = 4;
	let primitive_polynomial = Polynomial::get_primitive_polynomial(char, n);
	let x:FiniteField = FiniteField{
 		char: char,
 		element:Element::GaloisField{element:vec![0,1],primitive_polynomial:primitive_polynomial.clone()} // i.e. [0,1] = x -> 2 over GF(2^4)
	};
	let y:FiniteField = FiniteField{
 		char: char,
 		element:Element::GaloisField{element:vec![0,0,1,1],primitive_polynomial:primitive_polynomial.clone()} // i.e. [0,0,1,1] = x^3 + x^2 -> 12 over GF(2^4)
	};
	println!("x + y = {:?}", (x.clone() + y.clone()).element);
	println!("x - y = {:?}", (x.clone() - y.clone()).element);
	println!("x * y = {:?}", (x.clone() * y.clone()).element);
	println!("x / y = {:?}", (x.clone() / y.clone()).element);

}
#+end_src
** Polynomial over F_p
#+begin_src rust
use galois_field::*;

fn main() {
	// character
    let char: u32 = 2;

	let element0:FiniteField = FiniteField{
		char: char,
		element:Element::PrimeField{element:0} // 0 in F_5
	};
	let element1:FiniteField = FiniteField{
		char: char,
		element:Element::PrimeField{element:1} // 1 in F_5
	};


	let f: Polynomial = Polynomial {
        coef: vec![element1.clone(),element0.clone(),element0.clone(),element0.clone(),element1.clone()]
	};
    let g: Polynomial = Polynomial {
		coef: vec![element1.clone(),element0.clone(),element0.clone(),element1.clone(),element1.clone()]
    };
    println!("f + g = {:?}", (f.clone()+g.clone()).coef);
	println!("f - g = {:?}", (f.clone()-g.clone()).coef);
	println!("f * g = {:?}", (f.clone()*g.clone()).coef);
	println!("f / g = {:?}", (f.clone()/g.clone()).coef);
	println!("f % g = {:?}", (f.clone()%g.clone()).coef);
	
}
#+end_src
** Polynomial over GF(p^n)
Same as above
** Matrix over FiniteField

#+begin_src rust
use galois_field::*;

let char = 3;
let element0: FiniteField = FiniteField {
    char: char,
    element: Element::PrimeField { element: 0 },
};
let element1: FiniteField = FiniteField {
    char: char,
    element: Element::PrimeField { element: 1 },
};
let element2: FiniteField = FiniteField {
    char: char,
    element: Element::PrimeField { element: 2 },
};


let mut matrix_element:Vec<Vec<FiniteField>> = vec![
    vec![element0.clone(),element1.clone(), element0.clone()],
    vec![element2.clone(),element2.clone(), element1.clone()],
    vec![element1.clone(),element0.clone(), element1.clone()]
];
let mut matrix = Matrix{
    element: matrix_element,
};

println!("m+m = {:?}", m.clone()+m.clone());
println!("m*m = {:?}", m.clone()*m.clone());

let mut sweep_matrix = m.sweep_method();
println!("{:?}", sweep_matrix);



#+end_src
* Link
https://crates.io/crates/galois_field

